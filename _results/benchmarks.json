{
    "benchmarks.time_box_filter_on_partition": {
        "code": "def time_box_filter_on_partition():\n    \"\"\"Time box search on a single partition\"\"\"\n    metadata = load_small_sky_order1().hc_structure\n    mock_partition_df = pd.DataFrame(\n        {\n            metadata.catalog_info.ra_column: np.linspace(-1000, 1000, 100_000),\n            metadata.catalog_info.dec_column: np.linspace(-90, 90, 100_000),\n        }\n    )\n    box_filter(mock_partition_df, ra=(-20, 40), dec=(-90, 90), metadata=metadata.catalog_info)",
        "min_run_count": 2,
        "name": "benchmarks.time_box_filter_on_partition",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a73c530467c04727a3a1041c42b5cada981cfdae3f78217d05de4d70be9f5168",
        "warmup_time": -1
    },
    "benchmarks.time_create_large_catalog": {
        "code": "def time_create_large_catalog():\n    return lsdb.open_catalog(BENCH_DATA_DIR / \"large_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_create_large_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3f9b23c76db4ae5103da07499ca197a4722eabd18c4a71705e5e7836b62efd7b",
        "warmup_time": -1
    },
    "benchmarks.time_create_midsize_catalog": {
        "code": "def time_create_midsize_catalog():\n    return lsdb.open_catalog(BENCH_DATA_DIR / \"midsize_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_create_midsize_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "df0781a9e8c88646c54e50a444d93b859a78e3d3e82d1d3ba2c116fd7d209050",
        "warmup_time": -1
    },
    "benchmarks.time_kdtree_crossmatch": {
        "code": "def time_kdtree_crossmatch():\n    \"\"\"Time computations are prefixed with 'time'.\"\"\"\n    small_sky = load_small_sky()\n    small_sky_xmatch = load_small_sky_xmatch()\n    small_sky.crossmatch(small_sky_xmatch, require_right_margin=False).compute()",
        "min_run_count": 2,
        "name": "benchmarks.time_kdtree_crossmatch",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "331530da4eac25967595fcb3d58955d2f5f4c35ba05b97c36a13f66d0cb0c800",
        "warmup_time": -1
    },
    "benchmarks.time_lazy_crossmatch_many_columns_all_suffixes": {
        "code": "def time_lazy_crossmatch_many_columns_all_suffixes():\n    cat = lsdb.open_catalog(BENCH_DATA_DIR / \"object_collection\", columns=\"all\")\n    return cat.crossmatch(\n        cat, require_right_margin=False, suffixes=(\"_left\", \"_right\"), suffix_method=\"all_columns\"\n    )",
        "min_run_count": 2,
        "name": "benchmarks.time_lazy_crossmatch_many_columns_all_suffixes",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "499bcc315a346f56ab9a40b5e2f04de3a2fb2492c69446ad119d416b2c213cd6",
        "warmup_time": -1
    },
    "benchmarks.time_lazy_crossmatch_many_columns_overlapping_suffixes": {
        "code": "def time_lazy_crossmatch_many_columns_overlapping_suffixes():\n    cat = lsdb.open_catalog(BENCH_DATA_DIR / \"object_collection\", columns=\"all\")\n    return cat.crossmatch(\n        cat,\n        require_right_margin=False,\n        suffixes=(\"_left\", \"_right\"),\n        suffix_method=\"overlapping_columns\",\n        log_changes=False,\n    )",
        "min_run_count": 2,
        "name": "benchmarks.time_lazy_crossmatch_many_columns_overlapping_suffixes",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "dfd97fba91b897c1c56add5c2f35998fa4f8bcb3c24d1245c6c3bdb163efa858",
        "warmup_time": -1
    },
    "benchmarks.time_open_many_columns_all": {
        "code": "def time_open_many_columns_all():\n    return lsdb.open_catalog(BENCH_DATA_DIR / \"object_collection\", columns=\"all\")",
        "min_run_count": 2,
        "name": "benchmarks.time_open_many_columns_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "454cfe9f909dc3604c59617196369ff83ae328012890e237f170aac365aaba53",
        "warmup_time": -1
    },
    "benchmarks.time_open_many_columns_default": {
        "code": "def time_open_many_columns_default():\n    return lsdb.open_catalog(BENCH_DATA_DIR / \"object_collection\")",
        "min_run_count": 2,
        "name": "benchmarks.time_open_many_columns_default",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "67a836bdc8369f9b810c6145308fd4e4eab5d1d8b1c4a38f6b8a9efa1a154a73",
        "warmup_time": -1
    },
    "benchmarks.time_open_many_columns_list": {
        "code": "def time_open_many_columns_list():\n    return lsdb.open_catalog(\n        BENCH_DATA_DIR / \"object_collection\",\n        columns=[\"objectId\", \"coord_dec\", \"coord_decErr\", \"coord_ra\", \"coord_raErr\"],\n    )",
        "min_run_count": 2,
        "name": "benchmarks.time_open_many_columns_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2501cc8680ae3a79540784586b83b9486a0cf65b37d41c0ccf28818336d51474",
        "warmup_time": -1
    },
    "benchmarks.time_polygon_search": {
        "code": "def time_polygon_search():\n    \"\"\"Time polygonal search using sphgeom\"\"\"\n    small_sky_order1 = load_small_sky_order1().compute()\n    # Upsample test catalog to 10,000 points\n    catalog_ra = upsample_array(small_sky_order1[\"ra\"].to_numpy(), 10_000)\n    catalog_dec = upsample_array(small_sky_order1[\"dec\"].to_numpy(), 10_000)\n    # Define sky polygon to use in search\n    vertices = [(300, -50), (300, -55), (272, -55), (272, -50)]\n    polygon = get_cartesian_polygon(vertices)\n    # Apply vectorized filtering on the catalog points\n    polygon.contains(np.radians(catalog_ra), np.radians(catalog_dec))",
        "min_run_count": 2,
        "name": "benchmarks.time_polygon_search",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "93daaa30339670b204c524d53201aa70deb674f43f2716fc7d19aa827f4a1f95",
        "warmup_time": -1
    },
    "benchmarks.time_save_big_catalog": {
        "code": "def time_save_big_catalog():\n    \"\"\"Load a catalog with many partitions, and save with to_hats.\"\"\"\n    mock_partition_df = pd.DataFrame(\n        {\n            \"ra\": np.linspace(0, 360, 100_000),\n            \"dec\": np.linspace(-90, 90, 100_000),\n            \"id\": np.arange(100_000, 200_000),\n        }\n    )\n\n    with tempfile.TemporaryDirectory() as tmp_path:\n        kwargs = {\n            \"catalog_name\": \"big_sky\",\n            \"catalog_type\": \"object\",\n            \"lowest_order\": 6,\n            \"highest_order\": 10,\n            \"threshold\": 500,\n        }\n\n        catalog = lsdb.from_dataframe(mock_partition_df, margin_threshold=None, **kwargs)\n\n        catalog.to_hats(tmp_path)\n\n        read_catalog = hats.read_hats(tmp_path)\n        assert len(read_catalog.get_healpix_pixels()) == len(catalog.get_healpix_pixels())",
        "min_run_count": 2,
        "name": "benchmarks.time_save_big_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "772a85f32b565448b6f6b63be9ccb16ef1e9486fbb33da608d6e6249b1c4fea1",
        "warmup_time": -1
    },
    "version": 2
}