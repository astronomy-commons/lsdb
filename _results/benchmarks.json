{
    "benchmarks.time_box_filter_on_partition": {
        "code": "def time_box_filter_on_partition():\n    \"\"\"Time box search on a single partition\"\"\"\n    metadata = load_small_sky_order1().hc_structure\n    mock_partition_df = pd.DataFrame(\n        {\n            metadata.catalog_info.ra_column: np.linspace(-1000, 1000, 100_000),\n            metadata.catalog_info.dec_column: np.linspace(-90, 90, 100_000),\n        }\n    )\n    box_filter(mock_partition_df, ra=(-20, 40), dec=(-90, 90), metadata=metadata.catalog_info)",
        "min_run_count": 2,
        "name": "benchmarks.time_box_filter_on_partition",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a73c530467c04727a3a1041c42b5cada981cfdae3f78217d05de4d70be9f5168",
        "warmup_time": -1
    },
    "benchmarks.time_create_large_catalog": {
        "code": "def time_create_large_catalog():\n    return lsdb.read_hats(BENCH_DATA_DIR / \"large_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_create_large_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b7269a6892c684b6e767fe124c092484acfde95f07eb85d305b5baa0f492690e",
        "warmup_time": -1
    },
    "benchmarks.time_create_midsize_catalog": {
        "code": "def time_create_midsize_catalog():\n    return lsdb.read_hats(BENCH_DATA_DIR / \"midsize_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_create_midsize_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "1bb7ec29f4f7be3c1ddb7cb5b3d00ed0220d01824d6e98f372d180527d468acd",
        "warmup_time": -1
    },
    "benchmarks.time_kdtree_crossmatch": {
        "code": "def time_kdtree_crossmatch():\n    \"\"\"Time computations are prefixed with 'time'.\"\"\"\n    small_sky = load_small_sky()\n    small_sky_xmatch = load_small_sky_xmatch()\n    small_sky.crossmatch(small_sky_xmatch, require_right_margin=False).compute()",
        "min_run_count": 2,
        "name": "benchmarks.time_kdtree_crossmatch",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "331530da4eac25967595fcb3d58955d2f5f4c35ba05b97c36a13f66d0cb0c800",
        "warmup_time": -1
    },
    "benchmarks.time_polygon_search": {
        "code": "def time_polygon_search():\n    \"\"\"Time polygonal search using sphgeom\"\"\"\n    small_sky_order1 = load_small_sky_order1().compute()\n    # Upsample test catalog to 10,000 points\n    catalog_ra = upsample_array(small_sky_order1[\"ra\"].to_numpy(), 10_000)\n    catalog_dec = upsample_array(small_sky_order1[\"dec\"].to_numpy(), 10_000)\n    # Define sky polygon to use in search\n    vertices = [(300, -50), (300, -55), (272, -55), (272, -50)]\n    polygon = get_cartesian_polygon(vertices)\n    # Apply vectorized filtering on the catalog points\n    polygon.contains(np.radians(catalog_ra), np.radians(catalog_dec))",
        "min_run_count": 2,
        "name": "benchmarks.time_polygon_search",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "93daaa30339670b204c524d53201aa70deb674f43f2716fc7d19aa827f4a1f95",
        "warmup_time": -1
    },
    "version": 2
}