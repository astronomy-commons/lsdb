{
    "benchmarks.time_box_filter_on_partition": {
        "code": "def time_box_filter_on_partition():\n    \"\"\"Time box search on a single partition\"\"\"\n    metadata = load_small_sky_order1().hc_structure\n    mock_partition_df = pd.DataFrame(\n        np.linspace(-1000, 1000, 100_000), columns=[metadata.catalog_info.ra_column]\n    )\n    box_filter(mock_partition_df, ra=(-20, 40), dec=None, metadata=metadata.catalog_info).compute()",
        "min_run_count": 2,
        "name": "benchmarks.time_box_filter_on_partition",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "b082de7cc2e9a8751b38a70266508b8c47746389e8365c18170de2ea3de3278b",
        "warmup_time": -1
    },
    "benchmarks.time_create_large_catalog": {
        "code": "def time_create_large_catalog():\n    return lsdb.read_hipscat(BENCH_DATA_DIR / \"large_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_create_large_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "33de3daf50de6e264447645f451ab995317098103c3b1cf4122e44df189bd377",
        "warmup_time": -1
    },
    "benchmarks.time_create_midsize_catalog": {
        "code": "def time_create_midsize_catalog():\n    return lsdb.read_hipscat(BENCH_DATA_DIR / \"midsize_catalog\")",
        "min_run_count": 2,
        "name": "benchmarks.time_create_midsize_catalog",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f3a11a61e8d57e9964e98cc1842f935782286d8ffa8a341274515e30ff96eb1b",
        "warmup_time": -1
    },
    "benchmarks.time_kdtree_crossmatch": {
        "code": "def time_kdtree_crossmatch():\n    \"\"\"Time computations are prefixed with 'time'.\"\"\"\n    small_sky = load_small_sky()\n    small_sky_xmatch = load_small_sky_xmatch()\n    small_sky.crossmatch(small_sky_xmatch, require_right_margin=False).compute()",
        "min_run_count": 2,
        "name": "benchmarks.time_kdtree_crossmatch",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "331530da4eac25967595fcb3d58955d2f5f4c35ba05b97c36a13f66d0cb0c800",
        "warmup_time": -1
    },
    "benchmarks.time_polygon_search": {
        "code": "def time_polygon_search():\n    \"\"\"Time polygonal search using sphgeom\"\"\"\n    small_sky_order1 = load_small_sky_order1().compute()\n    # Upsample test catalog to 10,000 points\n    catalog_ra = upsample_array(small_sky_order1[\"ra\"].to_numpy(), 10_000)\n    catalog_dec = upsample_array(small_sky_order1[\"dec\"].to_numpy(), 10_000)\n    # Define sky polygon to use in search\n    vertices = [(300, -50), (300, -55), (272, -55), (272, -50)]\n    polygon, _ = get_cartesian_polygon(vertices)\n    # Apply vectorized filtering on the catalog points\n    polygon.contains(np.radians(catalog_ra), np.radians(catalog_dec))",
        "min_run_count": 2,
        "name": "benchmarks.time_polygon_search",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "bdebab02cc8d570e0f4492ba5939fbcabeb3eefaed8b9908cbf557cc6412b432",
        "warmup_time": -1
    },
    "version": 2
}